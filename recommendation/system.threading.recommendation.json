{
    "Name": "System.Threading",
    "Version": "1.0.0",
    "Packages": {
        "Type": "SDK",
        "Name": "System.Threading"
    },
    "Recommendations": [
        {
            "Type": "Method",
            "Value": "System.Threading.ReaderWriterLock.ReleaseWriterLock()",
            "Name": "ReleaseWriterLock",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use System.Threading.ReaderWriterLockSlim.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.ReaderWriterLock.AcquireReaderLock(int)",
            "Name": "AcquireReaderLock",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use System.Threading.ReaderWriterLockSlim.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.ReaderWriterLock.ReleaseReaderLock()",
            "Name": "ReleaseReaderLock",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use System.Threading.ReaderWriterLockSlim.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.EventWaitHandle.OpenExisting(string, System.Security.AccessControl.EventWaitHandleRights)",
            "Name": "OpenExisting",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use EventWaitHandle.OpenExisting(string).",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)",
            "Name": "UpgradeToWriterLock",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use System.Threading.ReaderWriterLockSlim.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.Thread.ResetAbort()",
            "Name": "ResetAbort",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Portable code should not rely on COM apartment semantics, and so should avoid this type.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.Thread.Abort()",
            "Name": "Abort",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Portable code should not rely on COM apartment semantics, and so should avoid this type.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.ReaderWriterLock.ReleaseLock()",
            "Name": "ReleaseLock",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use System.Threading.ReaderWriterLockSlim.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.WaitHandle.Close()",
            "Name": "Close",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use Dispose() instead.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.ThreadPool.GetMinThreads(int, int)",
            "Name": "GetMinThreads",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Portable code should not rely on COM apartment semantics, and so should avoid this type.",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Method",
            "Value": "System.Threading.Timer.Dispose(System.Threading.WaitHandle)",
            "Name": "Dispose",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "If you need to synchronize destruction of the timer with execution of the callback, do this yourself via Monitor or other synchronization mechanism.  If not, simply use Dispose().  Code sample: http://aka.ms/porttocore_timer_dispose",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Namespace",
            "Value": "System.Threading",
            "Name": "System.Threading",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "If you need to synchronize destruction of the timer with execution of the callback, do this yourself via Monitor or other synchronization mechanism.  If not, simply use Dispose().  Code sample: http://aka.ms/porttocore_timer_dispose",
                    "Actions": []
                }
            ]
        },
        {
            "Type": "Type",
            "Value": "System.Threading.ReaderWriterLock",
            "Name": "System.Threading.ReaderWriterLock",
            "KeyType": "",
            "RecommendedActions": [
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use System.Threading.ReaderWriterLockSlim.",
                    "Actions": []
                }
            ]
        }
    ]
}