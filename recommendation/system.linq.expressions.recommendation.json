{
    "Name": "System.Linq.Expressions",
    "Version": "1.0.0",
<<<<<<< HEAD
    "Packages": {
        "Type": "SDK",
        "Name": "System.Linq.Expressions"
    },
    "Recommendations": [
        {
            "Type": "Namespace",
            "Value": "System.Linq.Expressions",
            "Name": "System.Linq.Expressions",
            "KeyType": "",
            "RecommendedActions": [
=======
    "Packages": [
        {
            "System.Linq.Expressions": {
                "Type": "SDK",
                "Name": "System.Linq.Expressions"
            }
        }
    ],
    "Recommendations": [
        {
            "Type": "Method",
            "Value": "System.Linq.Expressions.Expression..ctor(System.Linq.Expressions.ExpressionType,System.Type)",
            "Reference": "System.Linq.Expressions",
            "Recommendation": [
>>>>>>> master
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.",
                    "Actions": []
                }
            ]
        },
        {
<<<<<<< HEAD
            "Type": "Method",
            "Value": "System.Linq.Expressions.Expression..ctor(System.Linq.Expressions.ExpressionType,System.Type)",
            "Name": ".ctor",
            "KeyType": "",
            "RecommendedActions": [
=======
            "Type": "Namespace",
            "Value": "System.Linq.Expressions",
            "Reference": "System.Linq.Expressions",
            "Recommendation": [
>>>>>>> master
                {
                    "Source": "Amazon",
                    "Preferred": "yes",
                    "TargetFrameworks": [
                        "netcoreapp3.1"
                    ],
                    "Description": "Use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.",
                    "Actions": []
                }
            ]
        }
    ]
}